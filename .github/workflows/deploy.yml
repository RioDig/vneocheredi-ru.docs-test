name: Deploy Docusaurus to Server

on:
  push:
    branches:
      - master # Запуск на коммитах в main

jobs:
  deploy:
    name: Build and Deploy to Server
    runs-on: ubuntu-latest

    steps:
      # Шаг 1. Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2. Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Укажите вашу версию Node.js
#          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-modules-

      # Шаг 3. Установка зависимостей
      - name: Install dependencies
        run: yarn install

      # Шаг 4. Сборка Docusaurus
      - name: Build Docusaurus
        run: yarn build

      - name: Serving Build
        run: |
          yarn serve > serve.log 2>&1 &
          echo $! > serve.pid

      - name: Set Puppeteer Executable Path
        run: |
          echo "PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser" >> $GITHUB_ENV

#      - name: Generate PDF
#        run: yarn generate:pdf

      - name: Move PDF to Build directory
        run: |
          mv -f ./static/images/vneocheredi_user_guide3.pdf ./build/images/vneocheredi_user_guide3.pdf

      - name: Stop Serve Process
        run: kill $(cat serve.pid)

      - name: Log in to Yangex Registry
        run: |
          echo ${{ secrets.YANDEX_REGISTRY_OAUTH }}|docker login \
          --username oauth \
          --password-stdin \
          cr.yandex

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.YANDEX_DOCKER_REGISTRY }}/docusaurus-app:latest

#      - name: Push Docker Image
#        run: |
#          docker tag docusaurus-app ${{ secrets.YANDEX_DOCKER_REGISTRY }}/docusaurus-app:latest
#          docker push ${{ secrets.YANDEX_DOCKER_REGISTRY }}/docusaurus-app:latest

      # Шаг 8. Настройка SSH
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.5.3
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - name: Add server key to known_hosts
#        run: echo "${{ secrets.SERVER_PUBLIC_KEY }}" >> ~/.ssh/known_hosts

      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1
        with:
          template: ./docker-compose.yml
          vars: |
            registryRepository: ${{ secrets.YANDEX_DOCKER_REGISTRY }}

      - name: Write to file
        run: echo '${{ steps.render_template.outputs.result }}' > docker-compose.yml

      - name: Move docker-compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/home/riodig/vneocheredi-test/"

      - name: Docker-compose up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/riodig/vneocheredi-test
            echo ${{ secrets.YANDEX_REGISTRY_OAUTH }}|docker login --username oauth --password-stdin cr.yandex
            sudo docker-compose up -d
          

#      # Шаг 9. Копирование файлов на сервер
#      - name: Deploy to Server
#        run: |
#          rsync -vrm --delete -e "ssh -o StrictHostKeyChecking=no" ./build/ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/html/public/
